openapi: 3.0.0
info:
  title: "MPS Flask REST API"
  description: "An API about people and notes"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:
    Event:
      type: "object"
      required:
        - event_id
      properties:
        event_title:
          type: "string"
        event_body:
          type: "string"    
        event_id:
          type: "string"
  
    User:
      type: "object"
      required:
        - user_id
      properties:
        user_name:
          type: "string"
        user_id:
          type: "string"
        password:
          type: "string"
        active:
          type: "integer"
  parameters:
    user_id:
      name: "user_id"
      description: "ID of the person to get"
      in: path
      required: True
      schema:
        type: "string"

    event_id:
      name: "event_id"
      description: "ID of the event to get"
      in: path
      required: True
      schema:
        type: "string"

paths:
  /user:
    get:
      operationId: "user.read_all"
      tags:
        - "User"
      summary: "Read the list of users"
      responses:
        "200":
          description: "Sucessfully read user list"
    post:
      operationId: "user.create"
      tags:
        - "User"
      summary: "Create a new user"
      requestBody:
        description: "User to create"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"

          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                user_name:        
                  type: string
                password:   
                  type: string
              required:
                - user_name
                - password
      responses:
        "201":
          description: "Sucessfully created user"
 
      

  /user/{user_id}:
    get:
      operationId: "user.read_one"
      tags:
        - "User"
      summary: "Read one user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully read user"

    put:
      tags:
        - "User"
      operationId: "user.update"
      summary: "Update a user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully updated user"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"

    delete:
      tags:
        - "User"
      operationId: "user.delete"
      summary: "Delete a user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "204":
          description: "Successfully deleted user"
    
  /logout:
    get:
      tags:
        - "User"
      operationId: "user.logout"
      summary: "Logged out a user"
      responses:
        "200":
          description: "Sucessfully exited session"

 

  /event: 

    get:
      operationId: "event.read_all"
      tags:
        - "Event"
      summary: "Read the list of events"
      responses:
        "200":
          description: "Sucessfully read event list"
    post:
      operationId: "event.create"
      tags:
        - "Event"
      summary: "Create a new event"
      requestBody:
        description: "Event to create"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "event"
              $ref: "#/components/schemas/Event"
      responses:
        "201":
          description: "Sucessfully created event"

  /event/{event_id}:
    get:
      operationId: "event.read_one"
      tags:
        - "Event"
      summary: "Read one event"
      parameters:
        - $ref: "#/components/parameters/event_id"
      responses:
        "200":
          description: "Successfully read event"

    put:
      tags:
        - "Event"
      operationId: "event.update"
      summary: "Update a event"
      parameters:
        - $ref: "#/components/parameters/event_id"
      responses:
        "200":
          description: "Successfully updated event"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "event"
              $ref: "#/components/schemas/Event"

    delete:
      tags:
        - "Event"
      operationId: "event.delete"
      summary: "Delete a Event"
      parameters:
        - $ref: "#/components/parameters/event_id"
      responses:
        "204":
          description: "Successfully deleted event"

  /app:
    get:
      tags:
        - "Blog"
      operationId: "routes.web_page_index"
      responses:
        "200":
          description: "Returns HTML for the home page"
          content: 
            text/html:
              schema: 
                type: "string"
       
  /app/login:
    get:
      operationId: "routes.web_page_login"
      tags:
        - "User"
      summary: "Login page rendered"
      responses:
        "200":
          description: "Successfully successfull rendered login page"
          content: 
            text/html:
              schema: 
                type: "string"

    post:
      operationId: "user.login"
      tags:
        - "User"
      summary: "Login user"
      requestBody:
        description: "Login params"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                user_name:        
                  type: string
                password:   
                  type: string
              required:
                - user_name
                - password
      responses: 
        "200":
          description: "Success"
               
  /app/register:
    get:
      operationId: "routes.web_page_register"
      tags:
        - "User"
      summary: "Register page rendered"
      responses:
        "200":
          description: "Returns HTML for the register page"
          content: 
            text/html:
              schema: 
                type: "string"
 